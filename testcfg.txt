Terminals:
+ - * / % and or variable number is ! not = > < ( ) true false string ' " if elif else : print input str float int double while for in range def class import as from return raise len range , break pass continue with open
Variables:
S X VAR VAL BOOL OPS STRING IF ELIF ELSE PRINT EXPRES RELATION INPUT INBRACKET TYPE WHILE FOR RANGE DEF CLASS IMPORT FROM RETURN RAISE METHOD RANGE BREAK PASS CONTINUE COMMENT CONTENT
Productions:
S -> S S | VAR = X | VAR + = X | VAR - = X | VAR * = X | VAR / = X | IF | PRINT | WHILE | FOR | DEF | CLASS | IMPORT | FROM | COMMENT | ARRAY; 
X ->  VAR | VAL | X OPS X | INPUT | X , X | METHOD;
VAR -> variable;
VAL -> number | X OPS X | X * * X | X / / X | ( X ) | BOOL | STRING;
RELATION -> > | < | = = | ! = | < = | > =;
BOOL -> true | false | BOOL and BOOL | BOOL or BOOL | not BOOL | X is X | X RELATION X;
OPS -> + | - | * | / | %;
STRING -> " string " | ' string ' | STRING + STRING;
CONTENT -> VAR | CONTENT CONTENT;
COMMENT -> " " " CONTENT " " " | ' ' ' CONTENT ' ' ';
INBRACKET -> ( X ) | ( );
PRINT -> print INBRACKET;
EXPRES -> ( BOOL ) : S | BOOL : S;
RAISE -> raise INBRACKET;
IF -> if EXPRES | IF ELIF | IF ELSE | IF RAISE | IF BREAK | IF PASS | IF CONTINUE;
ELIF -> elif EXPRES | ELIF ELIF | ELIF ELSE;
ELSE -> else : S;
TYPE -> str | float | int | double;
INPUT -> input INBRACKET | TYPE ( INPUT );
RANGE -> range INBRACKET;
WHILE -> while EXPRES;
FOR -> for VAR in STRING : S | for VAR in RANGE : S;
RETURN -> return BOOL | return VAL;
DEF -> def VAR INBRACKET : S | DEF RETURN;
BREAK -> break;
PASS -> pass;
CONTINUE -> continue;
CLASS -> class VAR : S;
IMPORT -> import VAR as VAR | import VAR;
FROM -> from VAR IMPORT;
METHOD -> len INBRACKET | with open INBRACKET as VAR